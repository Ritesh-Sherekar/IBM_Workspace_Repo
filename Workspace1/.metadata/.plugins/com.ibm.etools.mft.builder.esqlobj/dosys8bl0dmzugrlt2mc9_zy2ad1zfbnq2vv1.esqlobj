CREATE COMPUTE MODULE Exception_Stored_Database_Flow_Compute
    CREATE FUNCTION Main() RETURNS BOOLEAN
    BEGIN
        CALL CopyMessageHeaders();
        CALL CopyEntireMessage();

       
--        -- Capture exception details
--        SET File = InputRoot.ExceptionList.RecoverableException.RecoverableException.RecoverableException.File;
--        SET Type = InputRoot.ExceptionList.RecoverableException.RecoverableException.RecoverableException.Type;
--        SET Text = InputRoot.ExceptionList.RecoverableException.RecoverableException.RecoverableException.Text;
--
--        -- Debugging - Store the values in the Environment tree for inspection
--        SET Environment.Variables.File = File;
--        SET Environment.Variables.Type = Type;
--        SET Environment.Variables.Text = Text;
--
--        -- Check if the values are null before calling the procedure
--        IF File IS NOT NULL AND Type IS NOT NULL AND Text IS NOT NULL THEN
--            CALL For_Exception_Stored(File, Type, Text);
--        ELSE
--            -- Log or handle the case where null values are found
--            THROW USER EXCEPTION CATALOG 'ErrorCatalog' MESSAGE 1001 VALUES('Null values in exception');
--        END IF;

        RETURN TRUE;
    END;

    CREATE PROCEDURE CopyMessageHeaders() BEGIN
        DECLARE I INTEGER 1;
        DECLARE J INTEGER;
        SET J = CARDINALITY(InputRoot.*[]);
        WHILE I < J DO
            SET OutputRoot.*[I] = InputRoot.*[I];
            SET I = I + 1;
        END WHILE;
    END;

    CREATE PROCEDURE CopyEntireMessage() BEGIN
    	 DECLARE File1 CHARACTER;
         DECLARE Type1 CHARACTER;
         DECLARE Text1 CHARACTER;
    	
          DECLARE info REFERENCE TO InputExceptionList.*[1];
           WHILE info.Number IS NOT NULL DO
           	SET File1 = info.File;
           	SET Type1 = info.Type;
           	SET Text1 = info.Text;
           	CALL For_Exception_Stored(File1,Type1,Text1);
           	MOVE info LASTCHILD;
           END WHILE;
        -- SET OutputRoot= InputRoot;
    END;
END MODULE;