CREATE COMPUTE MODULE Log4J_Flow_Compute
    CREATE FUNCTION Main() RETURNS BOOLEAN
    BEGIN
        -- Initialize Log4J
        CALL initLog4j(log) INTO var;

        -- Copy the message headers
        CALL CopyMessageHeaders();

        -- Copy the entire message and log data
        CALL CopyEntireMessage();

        RETURN TRUE;
    END;

    CREATE PROCEDURE CopyMessageHeaders() BEGIN
        DECLARE I INTEGER 1;
        DECLARE J INTEGER;
        SET J = CARDINALITY(InputRoot.*[]);
        WHILE I < J DO
            SET OutputRoot.*[I] = InputRoot.*[I];
            SET I = I + 1;
        END WHILE;
    END;

    CREATE PROCEDURE CopyEntireMessage() BEGIN
        DECLARE input_request, output_response CHARACTER;
        
        -- Copy XML to JSON structure
        SET OutputRoot.JSON.Data.Root = InputRoot.XMLNSC.Root;
        
        -- Convert XML and JSON to character streams
        SET input_request = CAST(ASBITSTREAM(InputRoot.XMLNSC CCSID InputRoot.Properties.CodedCharSetId) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
        SET output_response = CAST(ASBITSTREAM(OutputRoot.JSON CCSID InputRoot.Properties.CodedCharSetId) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
        
        -- Write logs using Log4J
        CALL logwrite(MessageFlowLabel, 'RakeshLogger1', 'INFO', 'Application_data: ' || input_request) INTO var;
        CALL logwrite(MessageFlowLabel, 'RakeshLogger1', 'INFO', 'Application_data: ' || output_response) INTO var;
    END;
END MODULE;