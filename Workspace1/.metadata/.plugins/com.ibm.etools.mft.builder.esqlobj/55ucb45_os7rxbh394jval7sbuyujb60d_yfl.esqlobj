/*EATE FUNCTION Main() RETURNS BOOLE*/
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE refXML REFERENCE TO InputRoot.XMLNSC;
		
		-- Converting XML format to Blob format
		DECLARE blobData BLOB;
		SET blobData = ASBITSTREAM(refXML
		                           ENCODING InputRoot.Properties.Encoding
		                           CCSID InputRoot.Properties.CodedCharSetId
		                           SET InputRoot.Properties.MessageSet
		                           TYPE InputRoot.Properties.MessageType
		                           FORMAT InputRoot.Properties.MessageFormat
		                           OPTIONS RootBitStream);
		                           
		-- Converting Blob format to Char
		DECLARE charData CHARACTER;
		SET charData = CAST(blobData AS CHAR CCSID InputRoot.Properties.CodedCharSetId
		ENCODING InputRoot.Properties.Encoding);
		
		-- Extract Application name
		DECLARE APPLICATION_NAME CHARACTER;
		--SET APPLICATION_NAME = Environment.Variables.ApplicationName;
		SET APPLICATION_NAME = 'DB_LOG';

        -- Extract Message Flow Name
		DECLARE MSG_FLOW_NAME CHAR;
		SET MSG_FLOW_NAME = 'DB_LOG_Flow';
		
		-- Set Current Time
		DECLARE LOG_TIME DATE;
		SET LOG_TIME = CURRENT_TIMESTAMP;
		
		-- Set Lock_Type 
		DECLARE LOCK_TYPE CHARACTER;
		SET LOCK_TYPE = 'Channel_Request';
		
		-- Stored Message
		DECLARE ABC REFERENCE TO InputRoot.XMLNSc;
		CALL myProcedure(ABC.APPLICATION_NAME ,ABC.MSG_FLOW_NAME ,ABC.LOG_TIME ,ABC.LOCK_TYPE ,ABC.MESSAGE);
		
		SET OutputRoot = InputRoot;
	END;
