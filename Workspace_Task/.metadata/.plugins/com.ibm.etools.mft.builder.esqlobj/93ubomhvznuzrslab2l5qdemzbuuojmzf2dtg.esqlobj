/*EATE FUNCTION Main() RETURNS BOOLE*/
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL initLog4j(Config_Path) INTO var;
		
	    DECLARE method_type CHARACTER;
    	SET method_type = SUBSTRING(InputRoot.HTTPInputHeader."X-Original-HTTP-Command" FROM 1 FOR 4);

		IF method_type = 'POST' THEN
			CALL CopyEntireMessage();
		ELSE
			THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2230 VALUES('Unsupported HTTP Method');
			PROPAGATE TO TERMINAL 'Catch';
		END IF;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE inref REFERENCE TO InputRoot.JSON.Data;
		DECLARE bank_ID INTEGER inref.bankId;
		DECLARE mobile_no INTEGER inref.mobileNo;
		DECLARE acc_no INTEGER inref.accNo;
		
		-----------------------------------------Logging-------------------------------------------
		DECLARE input_request CHARACTER;

		SET input_request = CAST(ASBITSTREAM(InputRoot.JSON.Data CCSID InputRoot.Properties.CodedCharSetId) as CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
        CALL logwrite(MessageFlowLabel,'Logger2','INFO',' ---------------------------Start Log -----------------------------------') INTO var;
		CALL logwrite(MessageFlowLabel,'Logger2', 'INFO', 'Application_Input_data:' || input_request) into var;
		
	 -----------------------------------------Logging-------------------------------------------
		
		-- Generate OTP
		DECLARE otp INTEGER;
		SET otp = MOD(CAST(EXTRACT(SECOND FROM CURRENT_TIMESTAMP) AS INTEGER) * 12345, 900000) + 100000;
		
		-- Generate Reffrence Number
		DECLARE reff_no CHARACTER UUIDASCHAR;
		SET Environment.ref = reff_no;
		
		----- Check the Account number is present or Not ----------
		DECLARE sqlStatement1 CHARACTER;
		SET sqlStatement1 = 'SELECT ACC_NO FROM '|| SCHEMA_I ||'.' ||'ACC_LINKING_REQ_TABLE';
		SET Environment.Data.accNo = PASSTHRU(sqlStatement1 TO Database.{DSN_NAME});
		DECLARE Present_Acc_NO INTEGER Environment.Data.accNo;
		
		IF Present_Acc_NO = acc_no THEN
				CALL ACC_Linking_Data_Update(acc_no, bank_ID, otp, reff_no, CURRENT_TIMESTAMP);
		ELSE
			CALL ACC_Linking_Data_Stored(acc_no, bank_ID, mobile_no, otp, reff_no, CURRENT_TIMESTAMP);
		END IF;

		
		
--		------- Sending OTP By Overriding the Email Output Node properties-----------------
--		SET OutputLocalEnvironment.Destination.Email.SMTPServer = 'mail.eidiko-india.com';
--		SET OutputRoot.EmailOutputHeader.From = 'riteshpradip.sherekar@eidiko-india.com';
--		SET OutputRoot.EmailOutputHeader.To = 'bhargavreddy.lingala@eidiko-india.com';
--		SET OutputRoot.EmailOutputHeader.Subject = 'Your One-Time Password (OTP)';
--		SET OutputRoot.BLOB.BLOB = CAST('Your OTP is: ' || CAST(otp AS CHAR) AS BLOB CCSID 1208);
		
		DECLARE sqlStatement CHARACTER;
		SET sqlStatement = 'SELECT BANK_NAME FROM '|| SCHEMA_I ||'.' ||'ACC_DISCOVERY_TABLE  WHERE BANKID = ?';
		SET Environment.Data.Bank_Name = PASSTHRU(sqlStatement TO Database.{DSN_NAME} VALUES(bank_ID));
		DECLARE bankName CHARACTER Environment.Data.Bank_Name.BANK_NAME;
		
		
		------- Sending OTP By Overriding the Email Output Node properties-----------------
		DECLARE con BLOB ;
		SET con = CAST(CAST(otp AS CHAR) AS BLOB CCSID 1208);
		
		SET OutputRoot.EmailOutputHeader.From = 'riteshsherekar@test.com';
		SET OutputRoot.EmailOutputHeader.To = 'gabriel@test.com';
		SET OutputRoot.EmailOutputHeader.Subject = 'Your One-Time Password (OTP)';
		SET OutputRoot.BLOB.BLOB = CAST('Dear Customer, ' AS BLOB CCSID 1208) || con || CAST(' is the OTP to link your ' AS BLOB CCSID 1208) ||CAST(bankName AS BLOB CCSID 1208) ||CAST(' Bank Accounts with Account Aggregator. Do not share it with anyone. Bank NEVER asks for OTP.' AS BLOB CCSID 1208);

		
		-----------------------------------------Logging-------------------------------------------
		DECLARE All_Data CHARACTER;
		DECLARE ch_otp CHARACTER CAST(otp AS CHARACTER);
		DECLARE ch_reff CHARACTER CAST(reff_no AS CHARACTER);
		DECLARE ch_req CHARACTER;
		SET ch_req = CAST(ASBITSTREAM(InputRoot.JSON.Data CCSID 1208 ENCODING 546) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);

		SET All_Data = ch_req || ' OTP IS: ' || ch_otp || ' Reference Number IS: ' || ch_reff;
		
		CALL logwrite(MessageFlowLabel, 'Logger2', 'INFO', 'Application_Input_data: ' || All_Data) INTO var;
		CALL logwrite(MessageFlowLabel,'Logger2','INFO',' ---------------------------End Log -----------------------------------') INTO var;
		-----------------------------------------Logging-------------------------------------------------
	END;
