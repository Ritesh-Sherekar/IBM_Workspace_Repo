/*EATE FUNCTION Main() RETURNS BOOLE*/
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL initLog4j_EXC(Config_Path) INTO var1;
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE ref REFERENCE TO InputExceptionList.*[>];
		DECLARE Text CHARACTER;
		DECLARE Itm ROW;

		WHILE LASTMOVE(ref) DO
			MOVE ref LASTCHILD;
			IF ref.Number IS NOT NULL THEN
				SET Text = ref.Text;
				SET Itm.item[] = ref.Insert[];
			END IF;
		END WHILE;

		DECLARE v INTEGER CARDINALITY(Itm.item[]);
		--SET OutputRoot.JSON.Data.error.message = Itm.item[v-3].Text;
		--SET OutputRoot.JSON.Data.error.statusCode = Itm.item[v-2].Text;
		SET OutputRoot.JSON.Data.error.error_desc = Text;

		--SET OutputRoot.JSON.Data.error.additionalData.Error.esb_error_code = Itm.item[v-1].Text;
		SET OutputRoot.JSON.Data.error.additionalData.Error.esb_error_desc = Itm.item.Text;
		
		DECLARE Exception_Occured CHARACTER;
		SET Exception_Occured = 'error_desc :' || Text || 'additionalData : ' || Itm.item.Text;
		----------------------------Logging------------------------------
		DECLARE input_request CHARACTER;

		SET input_request = CAST(ASBITSTREAM(InputRoot.JSON.Data CCSID InputRoot.Properties.CodedCharSetId) as CHARACTER CCSID InputRoot.Properties.CodedCharSetId);

		CALL logwrite_EXC(MessageFlowLabel,'ritesh', 'error', 'Application_Input_data:' || input_request || 'Exception: ' || Exception_Occured) into var1;
		----------------------------Logging------------------------------

	END;
