CREATE COMPUTE MODULE Acc_Linking_Varification_Flow_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- Check Method-----
		DECLARE method_type CHARACTER;
		SET method_type = SUBSTRING(InputRoot.HTTPInputHeader."X-Original-HTTP-Command" FROM 1 FOR 4);

		IF method_type = 'POST' THEN
			CALL CopyEntireMessage();
		ELSE
			THROW USER EXCEPTION CATALOG 'BIPmsgs' MESSAGE 2230 VALUES('Unsupported HTTP Method');
			PROPAGATE TO TERMINAL 'Catch';
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE inref REFERENCE TO InputRoot.JSON.Data;
		DECLARE bank_ID INTEGER inref.bankId;
		DECLARE acc_No INTEGER inref.accNo;
		DECLARE otp INTEGER inref.token;
		DECLARE reff_ID CHARACTER inref.referenceId;	
		
		DECLARE sqlStatement CHARACTER;
		SET sqlStatement = 'SELECT * FROM '|| Schema_I ||'.' ||'ACC_LINKING_REQ_TABLE  WHERE BANK_ID = ? AND ACC_NO = ? AND REF_NO = ?';
		SET Environment.Data[] = PASSTHRU(sqlStatement TO Database.{DSN_Name} VALUES(bank_ID, acc_No, reff_ID));
		
		DECLARE Acc_Number CHARACTER CAST(CAST(Environment.Data.ACC_NO AS DECIMAL CCSID 1208) AS CHARACTER CCSID 1208 );
		DECLARE otp_d CHARACTER CAST(CAST(Environment.Data.OTP AS DECIMAL CCSID 1208) AS CHARACTER CCSID 1208 );
		DECLARE b_id CHARACTER CAST(CAST(Environment.Data.BANK_ID AS DECIMAL CCSID 1208) AS CHARACTER CCSID 1208 );

		
		SET OutputRoot.JSON.Data.dfgh.ghjk9 = Acc_Number;
		SET OutputRoot.JSON.Data.dfgh.syxhj = otp_d;
		SET OutputRoot.JSON.Data.dfgh.gyhxsix = b_id;
		
		
		IF  Environment.Data.REF_NO = reff_ID AND Environment.Data.OTP = otp THEN
			SET OutputRoot.JSON.Data.Status = 'Success';
		ELSEIF  THEN 
			--SET OutputRoot.JSON.Data.Status = 'Invalid OTP';
		ELSE
			
		END IF;
		
	END;
END MODULE;