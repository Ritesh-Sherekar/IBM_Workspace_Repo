CREATE COMPUTE MODULE Task_DBLogging_MQ_Flow_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		   CALL CopyEntireMessage();
		  
		  
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE inref REFERENCE TO InputRoot.JSON.Data.OUTER;
		DECLARE id INTEGER  inref.REQUEST_ID;
		
		DECLARE env REFERENCE TO Environment.Variables;
		SET env.myvar = id;
	
	  --  DECLARE Env REFERENCE TO Environment.id;
	   
--	    DECLARE inref2 BLOB;
--	    SET inref2 = ASBITSTREAM(inref.PAYLOAD);
	    
--	    DECLARE REQUEST_ID CHARACTER id;
--	    
--	    DECLARE PAYLOAD BLOB;
--	    SET PAYLOAD = ASBITSTREAM(InputRoot.JSON.Data.OUTER.PAYLOAD);
--	    
--	    DECLARE CREATED_ON TIMESTAMP CURRENT_TIMESTAMP;
--	    
--	    DECLARE PAYLOAD_TYPE CHARACTER 'REQUEST';
--	    
--	    DECLARE PAYLOAD_ID CHARACTER 'ABC1';
	    
--	    DECLARE REQUEST_ID CHARACTER 'Insert into DBMQ Valuses(id)';
--	    
--		SET OutputRoot = InputRoot;
--		
--		CALL myPROCEDURE(REQUEST_ID,PAYLOAD,CREATED_ON,PAYLOAD_TYPE,PAYLOAD_ID);

--        DECLARE sqlst CHARACTER 'insert into DBMQ valuses(id)';
--        PASSTHRU(sqlst);
        
        CALL generalProcedure(ASBITSTREAM(inref.PAYLOAD) , 'REQUEST');

	END;
	CREATE PROCEDURE generalProcedure (IN PAYLOAD BLOB, IN PAYLOAD_TYPE CHARACTER)
	BEGIN
		
		DECLARE env REFERENCE TO Environment.Variables;
		
		SET OutputRoot.MQRFH2.usr.Request_id = env.myvar;
		SET OutputRoot.MQRFH2.usr.PAYLOAD1 = PAYLOAD;
		SET OutputRoot.MQRFH2.usr.payLoad = PAYLOAD_TYPE;
		SET OutputRoot = InputRoot;
		PROPAGATE TO TERMINAL 'out1'; 
	END;
END MODULE;


--CREATE PROCEDURE myPROCEDURE (IN REQUEST_ID CHARACTER ,IN PAYLOAD BLOB,IN CREATED_ON TIMESTAMP,IN PAYLOAD_TYPE CHARACTER, IN PAYLOAD_ID CHARACTER)
--LANGUAGE DATABASE 
--EXTERNAL NAME "TASK_MQ_LOG";
